#!/usr/bin/env php -qC
<?php
// #!/usr/local/php5/bin/php -qC
// for Mac OS X
@ob_end_clean();
//error_reporting(E_ALL);
set_time_limit(0);

date_default_timezone_set('America/Los_Angeles');

// dbscript booter

$version = '0.6.0';

global $views,$app,$config,$env,$exec_time,$version,$response;
global $variants,$request,$loader,$db,$logic;


// old school dbscript app dir need to use /app instead

if (is_dir('db'))
  $app = 'db' . DIRECTORY_SEPARATOR;
elseif (is_dir('site'))
  $app = 'site' . DIRECTORY_SEPARATOR . 'db' . DIRECTORY_SEPARATOR;
else
  trigger_error( 'path to dbscript not found', E_USER_ERROR );




$GLOBALS['PATH'] = array();
$GLOBALS['PATH']['app'] = $app;
$GLOBALS['PATH']['library'] = $app . 'library' . DIRECTORY_SEPARATOR;
$GLOBALS['PATH']['controllers'] = $app . 'controllers' . DIRECTORY_SEPARATOR;
$GLOBALS['PATH']['models'] = $app . 'models' . DIRECTORY_SEPARATOR;
$GLOBALS['PATH']['plugins'] = $app . 'plugins' . DIRECTORY_SEPARATOR;
$GLOBALS['PATH']['dbscript'] = $GLOBALS['PATH']['library'] . 'dbscript' . DIRECTORY_SEPARATOR;
foreach( array(
    '_functions',
    'bootloader',
    'mapper',
    'route',
    'genericiterator',
    'collection',
    'view',
    'cookie'
  ) as $module ) {
  include $GLOBALS['PATH']['dbscript'] . $module . '.php';
}
lib_include( 'inflector' );
$request = new Mapper();
error_reporting( E_ALL & ~E_NOTICE & ~E_WARNING );
$dbscript_error_handler = set_error_handler( 'dbscript_error' );
include $GLOBALS['PATH']['library'] . 'yaml.php';
$loader = new Horde_Yaml();
if ( file_exists( $app . 'config.yml' ) ) {
  extract($loader->load(file_get_contents($app.'config.yml')));
  extract( $$env['enable_db'] );
} else {
  $env = array('app_folder'=>'app');
}
$env = array('app_folder'=>$ombroot.'app');
if (is_dir( $env['app_folder'] )) {
  $app = $env['app_folder'] . DIRECTORY_SEPARATOR;
  $appdir = $app;
  if ( file_exists( $app . 'config' . DIRECTORY_SEPARATOR . 'config.yml' ) ) {
    extract($loader->load(file_get_contents($app . 'config' . DIRECTORY_SEPARATOR .'config.yml')));
    extract( $$env['enable_db'] );
    if (isset($env['boot']))
      $appdir = $app.$env['boot'].DIRECTORY_SEPARATOR;
    else
      $appdir = $app.'omb'.DIRECTORY_SEPARATOR;
    $GLOBALS['PATH']['app'] = $app;
    $app = $appdir;
    $GLOBALS['PATH']['controllers'] = $appdir . 'controllers' . DIRECTORY_SEPARATOR;
    $GLOBALS['PATH']['models'] = $appdir . 'models' . DIRECTORY_SEPARATOR;
  }
  if (is_dir( $appdir . 'plugins' . DIRECTORY_SEPARATOR ))
    $GLOBALS['PATH']['plugins'] = $appdir . 'plugins' . DIRECTORY_SEPARATOR;
}
if ($env['debug_enabled']) {
  ini_set('display_errors','1');
  ini_set('display_startup_errors','1');
  error_reporting (E_ALL & ~E_NOTICE );
  global $exec_time;
  $exec_time = microtime_float();
}
db_include( array(
  'database',
  'model',
  'record',
  'recordset',
  'resultiterator',
  $adapter
));

if (defined('DB_NAME') && DB_NAME)
  $database = DB_NAME;

if (defined('DB_USER') && DB_USER)
  $username = DB_USER;

if (defined('DB_PASSWORD') && DB_PASSWORD)
  $password = DB_PASSWORD;

if (defined('DB_HOST') && DB_HOST)
  $host = DB_HOST;

$db = new $adapter(
  $host,
  $database,
  $username,
  $password
);
$loader = new BootLoader();
$loader->start();
$Setting =& $db->model('Setting');
$Setting->find_by(array(
  'eq'    => 'like',
  'name'  => 'config%'
));
while ($s = $Setting->MoveNext()) {
  $set = split('\.',$s->name);
  if (is_array($set) && $set[0] == 'config') {
    if ($set[1] == 'env') {
      $env[$set[2]] = $s->value;
    } elseif ($set[1] == 'perms') {
      $tab =& $db->models[$set[2]];
      if ($tab)
        $tab->permission_mask( $set[3],$s->value,$set[4] );
    }
  }
}
if ( isset( $env ))
  while ( list( $key, $plugin ) = each( $env['plugins'] ) )
    load_plugin( $plugin );



// end dbscript booter


$phpshell = $GLOBALS['PATH']['library'] . 'phpshell' . DIRECTORY_SEPARATOR;
$shellext = $phpshell . 'Extensions' . DIRECTORY_SEPARATOR;

  // load php-shell
require_once $phpshell . 'Shell.php';
require_once $phpshell . 'Extensions.php';
require_once $phpshell . 'Commands.php';
require_once $phpshell . 'Options.php';

require_once $shellext . 'Autoload.php';
require_once $shellext . 'AutoloadDebug.php';
require_once $shellext . 'Colour.php';
require_once $shellext . 'ExecutionTime.php';
require_once $shellext . 'InlineHelp.php';
require_once $shellext . 'VerbosePrint.php';
require_once $shellext . 'LoadScript.php';
require_once $shellext . 'Prototypes.php';
lib_include( 'inflector' );

  // load the SPYC yaml engine by Chris Wanstrath
require_once $GLOBALS['PATH']['library'] . 'spyc.php';

  // extract variables from the dbscript config file
if ( file_exists( $app . 'config.yml' ) )
  extract( Spyc::YAMLLoad( $app . 'config.yml' ) );
else
  trigger_error( 'unable to read dbscript configuration, sorry', E_USER_ERROR );

extract( $$env['enable_db'] );

  // if app folder exists, re-config
if (is_dir( $env['app_folder'] )) {
  $app = $env['app_folder'] . DIRECTORY_SEPARATOR;
  $GLOBALS['PATH']['controllers'] = $app . 'controllers' . DIRECTORY_SEPARATOR;
  $GLOBALS['PATH']['models'] = $app . 'models' . DIRECTORY_SEPARATOR;
  if ( file_exists( $app . 'config.yml' ) ) {
    extract( Spyc::YAMLLoad( $app . 'config.yml' ) );
    extract( $$env['enable_db'] );
  }
}

if ( is_dir( $app . $env['view_folder'] ) )
  $views = $app . $env['view_folder'].DIRECTORY_SEPARATOR;
else
  $views = $env['view_folder'].DIRECTORY_SEPARATOR;

  // load dbscript
require_once $GLOBALS['PATH']['dbscript'] . '_functions.php';
require_once $GLOBALS['PATH']['dbscript'] . 'database.php';
require_once $GLOBALS['PATH']['dbscript'] . 'model.php';
require_once $GLOBALS['PATH']['dbscript'] . 'record.php';
require_once $GLOBALS['PATH']['dbscript'] . 'recordset.php';
require_once $GLOBALS['PATH']['dbscript'] . 'genericiterator.php';
require_once $GLOBALS['PATH']['dbscript'] . 'resultiterator.php';

  // get db adapter
if ( file_exists( $GLOBALS['PATH']['dbscript'] . $adapter . '.php' ) )
  require_once $GLOBALS['PATH']['dbscript'] . $adapter . '.php';

  // connect
$db = new $adapter(
  $host,
  $database,
  $username,
  $password
);

session_start();

  // load database models into local objects

extract( $db->get_objects() );

class PHP_Shell_Extensions_dbscript implements PHP_Shell_Extension {
    
    public function register() {
        $cmd = PHP_Shell_Commands::getInstance();
        $cmd->registerCommand('#^generate #', $this, 'generate', '[idb] generate <var>', 'make an app');
        $cmd->registerCommand('#^choose #', $this, 'choose', '[idb] choose <var>', 'choose an app folder to use');
        $cmd->registerCommand('#^copy #', $this, 'copy', '[idb] copy <var> <var>', 'clone a data model');
        $cmd->registerCommand('#^install #', $this, 'install', '[idb] install <var> <var>', 'install an app');
        $cmd->registerCommand('#^update #', $this, 'update', '[idb] update <var> <var>', 'update an app');
    }
    
    public function install($l) {
      $args = split(" ",$l);
      $arr = split("/",$args[1]);
      $out = array_pop($arr);
      if (file_exists($out)) {
        print "file $out already exists";
        return;
      }
      $cp = curl_init("http://".$args[1]);
      $fp = fopen($out, "w");
      curl_setopt($cp, CURLOPT_FILE, $fp);
      curl_setopt($cp, CURLOPT_HEADER, 0);
      curl_exec($cp);
      curl_close($cp);
      fclose($fp);
      print "downloaded ".realpath($out)."\n";
      $retstr = exec( 'unzip -n '.$out, $retarr );
      if ($retstr && count($retarr) > 0) {
        print "unzipped (nothing was overwritten)"."\n";
      } else {
        print "sorry I could not unzip it! dang"."\n";
      }
      print "finished installing "."\n";
      //    foreach ($retarr as $line) {
      //      if (preg_match('/.*mail exchanger = (.*)/', $line, $matches)) $mxhosts[] = $matches[1];
      //    }
    }
    
    public function update($l) {
      
    }
    
    public function choose($l) {
      global $app,$views,$env;
      $args = split( ' ', $l );
      if (file_exists($app.$args[1])) {
         $target = $app.$args[1];
         $GLOBALS['PATH']['models'] = $target . DIRECTORY_SEPARATOR . 'models'. DIRECTORY_SEPARATOR;
         $GLOBALS['PATH']['controllers'] = $target . DIRECTORY_SEPARATOR . 'controllers'. DIRECTORY_SEPARATOR;
         $views = $target . DIRECTORY_SEPARATOR . 'views'. DIRECTORY_SEPARATOR;
         if ( file_exists( $target . DIRECTORY_SEPARATOR . 'config.yml' ) ) {
           extract( Spyc::YAMLLoad( $target . DIRECTORY_SEPARATOR . 'config.yml' ) );
           extract( $$env['enable_db'] );
         }
         print "using: ".realpath($app.$args[1]);
      }
    }
    
    public function copy($l) {
      global $app,$views;
      $args = split( ' ', $l );
       $read = $GLOBALS['PATH']['models'].$args[1].".php";
       $write = $GLOBALS['PATH']['models'].$args[2].".php";
       if (file_exists($read) && !(file_exists($write))) {
         $buff = file_get_contents($read);
         $buff = str_replace($args[1],$args[2],$buff);
         $buff = str_replace('$table','$'.tableize($args[2]),$buff);
         file_put_contents($write,$buff);
         print "created model: ".realpath($write);
         $cont = $GLOBALS['PATH']['controllers'].tableize($args[2]).".php";
         $dcont = $GLOBALS['PATH']['controllers'].tableize($args[1]).".php";
         if (file_exists($dcont) && !(file_exists($cont))) {
           copy( $dcont, $cont );
           print "created controller: ".realpath($cont);
         }
         return;
       }
    }
    
    public function generate($l) {
       global $app,$views;
       $args = split( ' ', $l );
       if ($args[1] == 'controller') {
         $cont = $GLOBALS['PATH']['controllers'].tableize($args[2]).".php";
         $dcont = $GLOBALS['PATH']['controllers']."index.php";
         if (file_exists($dcont) && !(file_exists($cont))) {
           copy( $dcont, $cont );
           print "created controller: ".realpath($cont);
         }
         return;
       }
       if ($args[1] == 'model') {
         $modelname = $args[2];
         $newmodel = $GLOBALS['PATH']['models'].$modelname.".php";
         if (!(file_exists($newmodel))) {
           $handle = fopen($newmodel, "w+");
           if ($handle) {
             fputs( $handle, '<?php' . "\n\n" );
             fputs( $handle, 'class '.$modelname.' extends Record {' . "\n\n" );
             fputs( $handle, 'function '.$modelname.'( &$'.tableize($modelname).' ) {' . "\n\n" );
             fputs( $handle, '  // fields' . "\n" );
             fputs( $handle, '  $'.tableize($modelname).'->auto_field( \'id\' );' . "\n" );
             fputs( $handle, '  $'.tableize($modelname).'->int_field( \'entry_id\' );' . "\n\n" );
             fputs( $handle, '  // relationships' . "\n" );
             fputs( $handle, '  $'.tableize($modelname).'->has_one( \'entry\' );' . "\n\n" );
             fputs( $handle, '  // access control' . "\n" );
             fputs( $handle, '  $'.tableize($modelname).'->let_read( \'all:everyone\' );' . "\n\n" );
             fputs( $handle, '}' . "\n\n" );
             fputs( $handle, '}' . "\n\n" );
             fputs( $handle, '?>' );
             fclose( $handle );
           }
         }
         print "created model: ".realpath($newmodel);
         return;
       }
       $target = $args[1];
       if (!(file_exists($target)))
         mkdir($target);
       else
         return;
       dircopy( $GLOBALS['PATH']['models'], $target . DIRECTORY_SEPARATOR . 'models' );
       $GLOBALS['PATH']['models'] = $target . DIRECTORY_SEPARATOR . 'models'. DIRECTORY_SEPARATOR;
       dircopy( $GLOBALS['PATH']['controllers'], $target . DIRECTORY_SEPARATOR . 'controllers' );
       $GLOBALS['PATH']['controllers'] = $target . DIRECTORY_SEPARATOR . 'controllers'. DIRECTORY_SEPARATOR;
       dircopy( $views, $target . DIRECTORY_SEPARATOR . 'views' );
       $views = $target . DIRECTORY_SEPARATOR . 'views'. DIRECTORY_SEPARATOR;
       copy( $app.'config.yml', $target . DIRECTORY_SEPARATOR . 'config.yml' );
       print "created: ".realpath($args[1]);
    }
}


/**
* default error-handler
*
* Instead of printing the NOTICE or WARNING from php we wan't the turn non-FATAL
* messages into exceptions and handle them in our own way.
*
* you can set your own error-handler by createing a function named
* __shell_error_handler
*
* @param integer $errno Error-Number
* @param string $errstr Error-Message
* @param string $errfile Filename where the error was raised
* @param interger $errline Line-Number in the File
* @param mixed $errctx ...
*/


function __shell_default_error_handler($errno, $errstr, $errfile, $errline, $errctx) {
    ## ... what is this errno again ?
    if ($errno == 2048) return;
    
    throw new Exception(sprintf("%s:%d\r\n%s", $errfile, $errline, $errstr));
}

set_error_handler("__shell_default_error_handler");

$__shell = new PHP_Shell();
$__shell_exts = PHP_Shell_Extensions::getInstance();
$__shell_exts->registerExtensions(array(
    "options"        => PHP_Shell_Options::getInstance(), /* the :set command */

    "autoload"       => new PHP_Shell_Extensions_Autoload(),
    "autoload_debug" => new PHP_Shell_Extensions_AutoloadDebug(),
    "colour"         => new PHP_Shell_Extensions_Colour(),
    "exectime"       => new PHP_Shell_Extensions_ExecutionTime(),
    "inlinehelp"     => new PHP_Shell_Extensions_InlineHelp(),
    "verboseprint"   => new PHP_Shell_Extensions_VerbosePrint(),
    "loadscript"     => new PHP_Shell_Extensions_LoadScript(),
    "dbscript"     => new PHP_Shell_Extensions_dbscript(),
));




/**
* the wrapper around the PHP_Shell class
*
* - load extensions
* - set default error-handler
* - add exec-hooks for the extensions
*
* To keep the namespace clashing between shell and your program 
* as small as possible all public variables and functions from
* the shell are prefixed with __shell:
* 
* - $__shell is the object of the shell
*   can be read, this is the shell object itself, don't touch it
* - $__shell_retval is the return value of the eval() before 
*   it is printed
*   can't be read, but overwrites existing vars with this name
* - $__shell_exception is the catched Exception on Warnings, Notices, ..
*   can't be read, but overwrites existing vars with this name
*/



$f = <<<EOF

[ interactive dbscript ]

idb:> use '?' to open the inline help 

EOF;

printf($f, 
    "0.1", 
    $__shell->hasReadline() ? '- your php has readline, which is nice' : '');
unset($f);

print $__shell_exts->colour->getColour("default");

while($__shell->input()) {
    if ($__shell_exts->autoload->isAutoloadEnabled() && !function_exists('__autoload')) {
        /**
        * default autoloader
        *
        * If a class doesn't exist try to load it by guessing the filename
        * class PHP_Shell should be located in PHP/Shell.php.
        *
        * you can set your own autoloader by defining __autoload() before including
        * this file
        * 
        * @param string $classname name of the class
        */

        function __autoload($classname) {
            global $__shell_exts;

            if ($__shell_exts->autoload_debug->isAutoloadDebug()) {
                print str_repeat(".", $__shell_exts->autoload_debug->incAutoloadDepth())." -> autoloading $classname".PHP_EOL;
            }
            include_once str_replace('_', '/', $classname).'.php';
            if ($__shell_exts->autoload_debug->isAutoloadDebug()) {
                print str_repeat(".", $__shell_exts->autoload_debug->decAutoloadDepth())." <- autoloading $classname".PHP_EOL;
            }
        }
    }

    try {
        $__shell_exts->exectime->startParseTime();
        if ($__shell->parse() == 0) {
            ## we have a full command, execute it

            $__shell_exts->exectime->startExecTime();

            $__shell_retval = eval($__shell->getCode()); 
            if (isset($__shell_retval)) {
                print $__shell_exts->colour->getColour("value");

                if (function_exists("__shell_print_var")) {
                    __shell_print_var($__shell_retval, $__shell_exts->verboseprint->isVerbose());
                } else {
                    var_export($__shell_retval);
                }
            }
            ## cleanup the variable namespace
            unset($__shell_retval);
            $__shell->resetCode();
        }
    } catch(Exception $__shell_exception) {
        print $__shell_exts->colour->getColour("exception");
        printf('%s (code: %d) got thrown'.PHP_EOL, get_class($__shell_exception), $__shell_exception->getCode());
        print $__shell_exception;
        
        $__shell->resetCode();

        ## cleanup the variable namespace
        unset($__shell_exception);
    }
    print $__shell_exts->colour->getColour("default");
    $__shell_exts->exectime->stopTime();
    if ($__shell_exts->exectime->isShow()) {
        printf(" (parse: %.4fs, exec: %.4fs)", 
            $__shell_exts->exectime->getParseTime(),
            $__shell_exts->exectime->getExecTime()
        );
    }
}

print $__shell_exts->colour->getColour("reset");





